/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 assets/normal-microphone.glb -t 
*/

import * as THREE from "three"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"
import { useCustomizeContext } from "../provider"
import { useEffect, useRef } from "react"
import { useFrame } from "@react-three/fiber"
import { usePathname } from "next/navigation"

type GLTFResult = GLTF & {
    nodes: {
        Shureobj001: THREE.Mesh
        Shureobj001_1: THREE.Mesh
        Shureobj001_2: THREE.Mesh
        Shureobj001_3: THREE.Mesh
        Plane: THREE.Mesh
    }
    materials: {
        ["Bottom handle"]: THREE.MeshStandardMaterial
        ["Capsule"]: THREE.MeshStandardMaterial
        ["Top handle"]: THREE.MeshStandardMaterial
        Material: THREE.MeshStandardMaterial
    }
}

export function Microphone({ ...props }) {
    const { nodes, materials } = useGLTF(
        "/assets/normal-microphone.glb"
    ) as GLTFResult

    const { capsule, topHandle, bottomHandle, isRotating, setIsRotating } =
        useCustomizeContext()

    useEffect(() => {
        if (capsule) {
            materials["Capsule"].color = new THREE.Color(capsule.color)
            materials["Capsule"].roughness = capsule.roughness
            materials["Capsule"].metalness = capsule.metalness
        }

        if (topHandle) {
            materials["Top handle"].color = new THREE.Color(topHandle.color)
            materials["Top handle"].roughness = topHandle.roughness
            materials["Top handle"].metalness = topHandle.metalness
        }

        if (bottomHandle) {
            materials["Bottom handle"].color = new THREE.Color(
                bottomHandle.color
            )
            materials["Bottom handle"].roughness = bottomHandle.roughness
            materials["Bottom handle"].metalness = bottomHandle.metalness
        }
    }, [capsule, topHandle, bottomHandle, materials])

    // Rotate the model on the y-axis while `isRotating` is true
    const modelRef = useRef<THREE.Group>(null)
    const pathname = usePathname()
    useFrame(() => {
        if (modelRef.current && isRotating && pathname === "/customize") {
            modelRef.current.rotation.y += 0.003
        }
    })

    // Handlers to toggle rotation on mouse events
    const handlePointerDown = () => setIsRotating(false)
    // const handlePointerUp = () => setIsRotating(true)
    return (
        <group
            dispose={null}
            onPointerDown={handlePointerDown}
            // onPointerUp={handlePointerUp}
        >
            <group ref={modelRef} {...props}>
                <mesh
                    geometry={nodes.Shureobj001_2.geometry}
                    material={materials["Capsule"]}
                />
                <mesh
                    geometry={nodes.Shureobj001_3.geometry}
                    material={materials["Top handle"]}
                />
                <mesh
                    geometry={nodes.Shureobj001_1.geometry}
                    material={materials["Bottom handle"]}
                />

                {/* Microphone Base */}
                <mesh
                    geometry={nodes.Shureobj001.geometry}
                    material={materials["Bottom handle"]}
                />
            </group>
        </group>
    )
}

useGLTF.preload("assets/normal-microphone.glb")
